library(fredr)
fredr_set_key('6f54a94ae313a0f8d1ba16d50a3d1e9f')
ecom <- fredr('ECOMPCTNSA') %>% dplyr::select(date, value) %>% as_tsibble(index = 'date')
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(fpp2)
library(FinTS)
library(dplyr)
library(tidyr)
library(fpp3)
library(car)
library(vars)
dat10 <- read.csv('data/vector_ar.csv')
dat.train <- dat10 %>% dplyr::filter(Year < 2004) %>% dplyr::select(-Year) %>% ts(start = 1946)
dat.test <- dat10 %>% dplyr::filter(Year >= 2004) %>% dplyr::select(-Year) %>% ts(start = 2004)
dat10.plot <- gather(dat10, Type, Value, -Year)
ggplot(dat = dat10.plot, aes(x = Year, y = Value, color = Type)) +
geom_line() +
ggtitle("Time series trend for RCC, RDPI, RMC") +
theme_minimal()
VARselect(dat.train, type = 'both')[['selection']]
var10 <- vars::VAR(dat.train, p=10, type="both")
var2 <- vars::VAR(dat.train, p=2, type="both")
var10
var2
serial.test(var2, lags.pt=10, type="PT.asymptotic")
serial.test(var10, lags.pt=10, type="PT.asymptotic")
# Test of the absence of ARCH effect:
arch.test(var2)
arch.test(var10)
library(patchwork)
residuals2 <- resid(var2) %>% data.frame()
residuals10 <- resid(var10) %>% data.frame()
residuals2$index <- seq(1:length(residuals2$RMC))
residuals10$index <- seq(1:length(residuals10$RMC))
residuals2 <- residuals2 %>% gather(key, value, -index)
residuals10 <- residuals10 %>% gather(key, value, -index)
p2 <- ggplot(data = residuals2, aes(x = index, y = value, color = key)) +
geom_line() +
ggtitle('Residual plot for var2 model')
p10 <- ggplot(data = residuals10, aes(x = index, y = value, color = key)) +
geom_line() +
ggtitle('Residual plot for var10 model')
p2 / p10
fc <- forecast::forecast(var2, h = 3)
fc %>%
forecast::autoplot() + xlab("Year")
acc_var <- accuracy(fc, dat.test, d = 1, D = 0)
acc_var
dat.train.log <- log(dat.train)
dat.test.log <- log(dat.test)
dat10.plot$log.value <- log(dat10.plot$Value)
ggplot(dat = dat10.plot, aes(x = Year, y = log.value, color = Type)) +
geom_line() +
ggtitle("Time series trend for log of RCC, RDPI, RMC") +
theme_minimal()
VARselect(dat.train.log, type = 'both')[['selection']]
#Fit 2 (BIC) and 9 (AIC)
log.var2 <- vars::VAR(dat.train.log, p=2, type="both")
log.var9 <- vars::VAR(dat.train.log, p=9, type="both")
serial.test(log.var2, lags.pt=10, type="PT.asymptotic")
serial.test(log.var9, lags.pt=10, type="PT.asymptotic")
#ONLY the BIC model passes the serial correlation test, so we will use this one for forecasting
fc.log <- forecast::forecast(log.var2, h = 3)
fc.log %>%
forecast::autoplot() + xlab("Year")
arch.test(log.var2)
residuals2 <- resid(log.var2) %>% data.frame()
residuals2$index <- seq(1:length(residuals2$RMC))
residuals2 <- residuals2 %>% gather(key, value, -index)
p2 <- ggplot(data = residuals2, aes(x = index, y = value, color = key)) +
geom_line() +
ggtitle('Residual plot for log var2 model')
p2
RMC <- exp(data.frame(fc.log$forecast$RMC)) - exp(data.frame(dat.test.log)$RMC)
RCC <- exp(data.frame(fc.log$forecast$RCC)) - exp(data.frame(dat.test.log)$RCC)
RDPI <- exp(data.frame(fc.log$forecast$RDPI)) - exp(data.frame(dat.test.log)$RDPI)
#RMSE of the model:
log.rmc.rmse <- sqrt(mean(RMC$Point.Forecast ** 2))
log.rcc.rmse <- sqrt(mean(RCC$Point.Forecast ** 2))
log.rdpi.rmse <- sqrt(mean(RDPI$Point.Forecast ** 2))
#non transformed fit
non.test.acc <- acc_var %>% data.frame() %>% dplyr::select(RMSE)
master.results <- cbind(c(log.rmc.rmse, log.rcc.rmse, log.rdpi.rmse),
c(non.test.acc[2,], non.test.acc[4,], non.test.acc[6,])) %>% data.frame
colnames(master.results) <- c('log transformed var model RMSE', 'raw data var model RMSE')
rownames(master.results) <- c(rownames(non.test.acc)[2], rownames(non.test.acc)[4], rownames(non.test.acc)[6])
master.results
dat.diff.train <- diff(dat.train)
dat.diff.test <- diff(dat.test)
dat10.ts <- ts(dat10, start = 1946)
dat10.ts.diff <- dat10.ts %>% diff()
dat10.ts.plot <- data.frame(dat10.ts.diff) %>% gather(key, value, -Year)
dat10.ts.plot$Year <- dat10$Year[-1]
ggplot(dat = dat10.ts.plot, aes(x = Year, y = value, color = key)) +
geom_line() +
ggtitle("Time series trend for differenced series of RCC, RDPI, RMC") +
theme_minimal()
VARselect(dat.diff.train, type = 'both')[['selection']]
#Fit 2 and 9
diff.var2 <- vars::VAR(dat.diff.train, p=2, type="both")
diff.var9 <- vars::VAR(dat.diff.train, p=9, type="both")
serial.test(diff.var2, lags.pt=10, type="PT.asymptotic")
serial.test(diff.var9, lags.pt=10, type="PT.asymptotic")
#We'll pick 2 from BIC as it's the only that that passes
fc.diff <- forecast::forecast(diff.var2, h = 3)
fc.diff %>%
forecast::autoplot() + xlab("Year")
arch.test(diff.var2)
residuals2 <- resid(diff.var2) %>% data.frame()
residuals2$index <- seq(1:length(residuals2$RMC))
residuals2 <- residuals2 %>% gather(key, value, -index)
p2 <- ggplot(data = residuals2, aes(x = index, y = value, color = key)) +
geom_line() +
ggtitle('Residual plot for log var2 model')
p2
#Forecast on the differenced series
RMC.diff.forecast <- fc.diff$forecast$RMC$mean
RCC.diff.forecast <- fc.diff$forecast$RCC$mean
RDPI.diff.forecast <- fc.diff$forecast$RDPI$mean
#Final values of the original series
RMC.prev <- dat.train[dim(dat.train)[1], 1] %>% as.numeric()
RCC.prev <- dat.train[dim(dat.train)[1], 2] %>% as.numeric()
RDPI.prev <- dat.train[dim(dat.train)[1], 3] %>% as.numeric()
#Forecast on the original series
fc.diff.orig <- matrix(nrow = 3, ncol = 3)
for (i in seq(1,3)){
fc.diff.orig[i, 1] <- RMC.prev <- RMC.diff.forecast[i] + RMC.prev
fc.diff.orig[i, 2] <- RCC.prev <- RCC.diff.forecast[i] + RCC.prev
fc.diff.orig[i, 3] <- RDPI.prev <- RDPI.diff.forecast[i] + RDPI.prev
}
results <- data.frame(fc.diff.orig)
colnames(results) <- c('RMC', 'RCC', 'RDPI')
rownames(results) <- time(dat.test)
results
sq <- (results - data.frame(dat.test))**2
results.RMC <- sqrt(mean(sq$RMC))
results.RCC <- sqrt(mean(sq$RCC))
results.RDPI <- sqrt(mean(sq$RDPI))
master.results$'differenced series var model RMSE' <- c(results.RMC, results.RCC, results.RDPI)
master.results
recent_production <- aus_production %>%
filter(year(Quarter) >= 1992)
fourier_beer <- recent_production %>%
model(TSLM(Beer ~ trend() + fourier(K=2)))
report(fourier_beer)
fc_beer <- forecast(fourier_beer)
fc_beer %>%
autoplot(recent_production) +
ggtitle("Forecasts of beer production using harmonic regression") +
xlab("Year") + ylab("megalitres")
gas.fit <- us_gasoline %>% filter(year(Week) <= 2004)
#generate matrix to store values
aic.scan <- matrix(nrow = 26, ncol = 2)
for (K in seq(1,26)) {
fourier_gas <- gas.fit %>%
model(TSLM(Barrels ~ trend() + fourier(K=K))) %>% glance()
aic.scan[K, 1] <- K
aic.scan[K, 2] <- fourier_gas$AIC
}
aic.scan <- data.frame(aic.scan)
colnames(aic.scan) <- c('K', 'AIC')
#Get the top 5 values
aic.scan[order(aic.scan$AIC),] %>% head(5)
fourier_gas <- gas.fit %>%
model(TSLM(Barrels ~ trend() + fourier(K=7)))
fourier_gas %>% glance()
fitted.plot <- augment(fourier_gas)
colnames(fitted.plot) <- c(".model", "Week", "Actual", "Fitted", ".resid")
fitted.plot <- fitted.plot %>% gather(actual_vs_fitted, value, -.model, -Week, -.resid)
ggplot(data = fitted.plot, aes(x = Week, y = value, color = actual_vs_fitted)) +
geom_line(alpha = 1) +
labs(x = 'Date', y = 'Gasoline',
title = 'Harmonic Regression of Supply of US Gasoline') +
theme_minimal()
gg_tsresiduals(fourier_gas, lag_max = 104)
fourier_gas %>% augment() %>% features(.resid, ljung_box, lag = 104)
test.gas <- us_gasoline %>% dplyr::filter(year(Week) == 2005)
fc.gas <- fourier_gas %>% forecast(test.gas)
#Plot 2004 and 2005
#fc.gas %>% autoplot(gas.fit %>% dplyr::filter(year(Week) >= 2004, year(Week) <= 2005)) +
#Plot only 2005
fc.gas %>% autoplot() +
geom_line(data = test.gas, aes(x = Week, y = Barrels, color = 'Actual')) +
labs(title = 'Harmonic forecast versus actual US Gas suppies',
level = 'Forecast CI',
colour = 'Data') +
theme_minimal()
test.gas <- us_gasoline %>% dplyr::filter(year(Week) > 2004)
fc.gas <- fourier_gas %>% forecast(test.gas)
fc.gas %>% autoplot() +
geom_line(data = test.gas, aes(x = Week, y = Barrels, color = 'Actual')) +
labs(title = 'Harmonic forecast versus actual US Gas suppies',
level = 'Forecast CI',
colour = 'Data') +
theme_minimal()
library(fredr)
fredr_set_key('6f54a94ae313a0f8d1ba16d50a3d1e9f')
ecom <- fredr('ECOMPCTNSA') %>% dplyr::select(date, value) %>% as_tsibble(index = 'date')
ecom
write_csv(ecom, 'test.csv')
readr::write_csv(ecom, 'test.csv')
tsibble(read.csv('test.csv'))
tsibble(read.csv('test.csv'), index = make_datetime(date))
ecom
tsibble(read.csv('test.csv'), index = date)
tsibble(read.csv('test.csv'), index = 'date')
tsibble(read.csv('test.csv'), index = date)
read.csv('test.csv')
test <- read.csv('test.csv')
read.csv('test.csv')
test
as.tsibble(test)
as_tsibble(test)
as_tsibble(test, index = date)
make_datetime(test$date)
test
as.Date(test$date)
tsibble(read.csv('test.csv'), index = as.Date(date))
test$date <- as.Date(test$date)
tsibble(read.csv('test.csv'), index = date)
as_tsibble(test, index = date)
eco
ecom
as_tsibble(test, index = date)
ecom <- read.csv('data/ecom.csv')
ecom <- read.csv('data/ecom.csv')
ecom$date <- as.Date(ecom$date)
ecom <- as_tsibble(ecom, index = date)
yearquarter(ecom$date)
#since we have quarterly data
ecom$date <- yearquarter(ecom$date)
head(ecom)
